package fr.lru.jeu;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

import fr.lru.observer.Observable;

public class GameEventManager extends Observable{

    private final List<String> evenements;
    private final ScheduledExecutorService scheduler;
    private final Random random;

    public GameEventManager() {
        // Liste d'Ã©vÃ©nements possibles
        this.evenements = new ArrayList<>();
        this.random = new Random();
        this.scheduler = Executors.newScheduledThreadPool(1);

        this.evenements.add("Un dragon apparaÃ®t !");
        this.evenements.add("Une tempÃªte magique Ã©clate !");
        this.evenements.add("Un portail dÃ©moniaque s'ouvre !");
        this.evenements.add("Un coffre lÃ©gendaire est dÃ©couvert !");
        this.evenements.add("Un monstre rare fait son apparition !");
        this.evenements.add("La nuit tombe et les crÃ©atures deviennent plus puissantes !");
    }

    // MÃ©thode qui dÃ©marre la boucle d'Ã©vÃ©nements toutes les secondes
    public void start() {
        this.scheduler.scheduleAtFixedRate(() -> {
            String evenement = this.evenements.get(random.nextInt(this.evenements.size()));
            this.genererEvenement(evenement);
        }, 0, 1, TimeUnit.SECONDS); // DÃ©lai initial : 0 sec, puis toutes les 1 sec
    }

    // MÃ©thode pour gÃ©nÃ©rer un Ã©vÃ©nement
    public void genererEvenement(String evenement) {
        System.out.println("âš¡ Ã‰vÃ©nement du jeu : " + evenement);

		notify(evenement);
    }

    // MÃ©thode pour arrÃªter la boucle (utile pour arrÃªter proprement le jeu)
    public void stop() {
        if (scheduler != null) {
            scheduler.shutdown();
            System.out.println("ğŸ›‘ La boucle d'Ã©vÃ©nements a Ã©tÃ© arrÃªtÃ©e.");
        }
    }
}
